import os
import jwt
import datetime
from fastapi import FastAPI, Query, Depends, HTTPException, Header
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
import mysql.connector
from typing import Optional, List, Dict, Any
from pydantic import BaseModel
from dotenv import load_dotenv
import pymongo
from bson.json_util import dumps
import json

# Chargement des variables d'environnement
load_dotenv('var.env')
SECRET_KEY = os.getenv("SECRET_KEY")
API_PASSWORD = os.getenv("API_PASSWORD")
host = os.getenv('host')
database = os.getenv('database')
user = os.getenv('user')
mdp = os.getenv("mdp")

# Configuration MongoDB
MONGO_URI = os.getenv("MONGO_URI", "mongodb://localhost:27017")
MONGO_DB = "projet_bloc_1"

app = FastAPI()

# S√©curit√© avec JWT
security = HTTPBearer()

class TokenRequest(BaseModel):
    """
    Mod√®le de requ√™te pour obtenir un token JWT.
    
    - password : Mot de passe requis pour obtenir un token.
    - duration : Dur√©e de validit√© du token en secondes (par d√©faut : 3600s / 1h).
    """
    password: str
    duration: Optional[int] = 3600

def create_jwt(duration: int) -> str:
    """
    G√©n√®re un token JWT valide pour une dur√©e sp√©cifi√©e.
    
    :param duration: Dur√©e de validit√© du token en secondes.
    :return: Token JWT encod√©.
    """
    expiration = datetime.datetime.now(datetime.timezone.utc) + datetime.timedelta(seconds=duration)
    return jwt.encode({"exp": expiration}, SECRET_KEY, algorithm="HS256")

@app.post("/token")
def generate_token(request: TokenRequest):
    """
    Endpoint pour g√©n√©rer un token JWT apr√®s authentification par mot de passe.
    
    :param request: Objet contenant le mot de passe et la dur√©e du token.
    :return: Dictionnaire contenant le token g√©n√©r√©.
    """
    print("üîπ Requ√™te re√ßue pour /token")
    print("Mot de passe re√ßu :", request.password)  # Ajout du print pour d√©bogage
    print("Mot de passe attendu :", API_PASSWORD)  # V√©rifie ce qui est stock√©
    if request.password != API_PASSWORD:
        raise HTTPException(status_code=401, detail="Invalid password")
    return {"token": create_jwt(request.duration)}

async def verify_token(credentials: HTTPAuthorizationCredentials = Depends(security)):
    """
    V√©rifie la validit√© du token JWT fourni par l'utilisateur.
    
    :param credentials: Token JWT inclus dans la requ√™te.
    :raises HTTPException: Si le token est expir√© ou invalide.
    """
    try:
        jwt.decode(credentials.credentials, SECRET_KEY, algorithms=["HS256"])
    except jwt.ExpiredSignatureError:
        raise HTTPException(status_code=401, detail="Token expired")
    except jwt.InvalidTokenError:
        raise HTTPException(status_code=401, detail="Invalid token")

def get_db_connection():
    """
    √âtablit une connexion √† la base de donn√©es MySQL.
    
    :return: Objet de connexion MySQL.
    """
    return mysql.connector.connect(
        host=host,
        user=user,
        password=mdp,
        database=database
    )

def get_mongo_connection():
    """
    √âtablit une connexion √† la base de donn√©es MongoDB.
    
    :return: Client MongoDB connect√© √† la base de donn√©es du projet.
    """
    client = pymongo.MongoClient(MONGO_URI)
    return client[MONGO_DB]

@app.get("/biens/agence/{id_agence}")
async def get_biens_by_agence(
    id_agence: int,
    credentials: HTTPAuthorizationCredentials = Depends(security)
):
    """
    R√©cup√®re tous les biens immobiliers g√©r√©s par une agence sp√©cifique.
    
    :param id_agence: ID unique de l'agence dont on veut lister les biens.
    :param credentials: Token JWT pour l'authentification.
    :return: Liste des biens immobiliers de l'agence.
    """
    await verify_token(credentials)
    connection = get_db_connection()
    cursor = connection.cursor(dictionary=True)
    query = """
        SELECT * FROM appartement WHERE id_appartement IN (SELECT id_appartement FROM appartement_agence WHERE id_agence = %s)
        UNION ALL
        SELECT * FROM maison WHERE id_maison IN (SELECT id_maison FROM maison_agence WHERE id_agence = %s)
    """
    cursor.execute(query, (id_agence, id_agence))
    results = cursor.fetchall()
    cursor.close()
    connection.close()
    return results

@app.get("/biens/filtre-prix")
async def get_biens_by_price_range(
    min_price: int = Query(0, alias="prix_min", description="Prix minimum du bien"),
    max_price: int = Query(1000000, alias="prix_max", description="Prix maximum du bien"),
    credentials: HTTPAuthorizationCredentials = Depends(security)
):
    """
    R√©cup√®re les biens immobiliers dont le prix est compris entre deux valeurs donn√©es.
    
    :param min_price: Prix minimum du bien (par d√©faut 0‚Ç¨).
    :param max_price: Prix maximum du bien (par d√©faut 1 000 000‚Ç¨).
    :param credentials: Token JWT pour l'authentification.
    :return: Liste des biens correspondant aux crit√®res de prix.
    """
    await verify_token(credentials)
    connection = get_db_connection()
    cursor = connection.cursor(dictionary=True)
    query = """
        SELECT * FROM appartement WHERE prix BETWEEN %s AND %s
        UNION ALL
        SELECT * FROM maison WHERE prix BETWEEN %s AND %s
    """
    cursor.execute(query, (min_price, max_price, min_price, max_price))
    results = cursor.fetchall()
    cursor.close()
    connection.close()
    return results

@app.get("/biens/filtre-surface")
async def get_biens_by_surface_range(
    min_surface: int = Query(0, alias="surface_min", description="Surface habitable minimum en m¬≤"),
    max_surface: int = Query(500, alias="surface_max", description="Surface habitable maximum en m¬≤"),
    credentials: HTTPAuthorizationCredentials = Depends(security)
):
    """
    R√©cup√®re les biens immobiliers dont la surface habitable est comprise entre deux valeurs donn√©es.
    
    :param min_surface: Surface minimum du bien en m¬≤ (par d√©faut 0 m¬≤).
    :param max_surface: Surface maximum du bien en m¬≤ (par d√©faut 500 m¬≤).
    :param credentials: Token JWT pour l'authentification.
    :return: Liste des biens correspondant aux crit√®res de surface.
    """
    await verify_token(credentials)
    connection = get_db_connection()
    cursor = connection.cursor(dictionary=True)
    
    query = """
        SELECT * FROM appartement WHERE surf_hab_m2 BETWEEN %s AND %s
        UNION ALL
        SELECT * FROM maison WHERE surf_hab_m2 BETWEEN %s AND %s
    """
    cursor.execute(query, (min_surface, max_surface, min_surface, max_surface))
    results = cursor.fetchall()
    
    cursor.close()
    connection.close()
    return results

@app.get("/mongo/descriptions-logements")
async def get_descriptions_logements(
    type_bien: Optional[str] = Query(None, description="Type de bien immobilier"),
    ville: Optional[str] = Query(None, description="Ville o√π se situe le bien"),
    parking: Optional[bool] = Query(None, description="Pr√©sence d'un parking ou garage"),
    jardin: Optional[bool] = Query(None, description="Pr√©sence d'un jardin ou terrain"),
    credentials: HTTPAuthorizationCredentials = Depends(security)
):
    """
    R√©cup√®re les descriptions de logements depuis MongoDB avec des filtres optionnels.
    
    :param type_bien: Filtre par type de bien (appartement, maison, etc.).
    :param ville: Filtre par ville.
    :param parking: Filtre par pr√©sence de parking/garage.
    :param jardin: Filtre par pr√©sence de jardin/terrain.
    :param credentials: Token JWT pour l'authentification.
    :return: Liste des descriptions de logements correspondant aux crit√®res.
    """
    await verify_token(credentials)
    
    # Construction du filtre de requ√™te
    query_filter = {}
    if type_bien:
        query_filter["Type de bien"] = {"$regex": type_bien, "$options": "i"}
    if ville:
        # Rendre la recherche plus flexible pour les noms de ville
        ville_cleaned = ville.replace("-", " ").replace("  ", " ")
        query_filter["Ville"] = {"$regex": f".*{ville_cleaned}.*", "$options": "i"}
    
    # Pour les champs qui sont des valeurs num√©riques 0 ou 1
    if parking is not None:
        query_filter["Parking / Garage"] = 1 if parking else 0
    
    if jardin is not None:
        query_filter["Jardin / Terrain"] = 1 if jardin else 0
    
    # S√©lection des champs √† retourner
    projection = {
        "Type de bien": 1,
        "Ville": 1,
        "title": 1,
        "short_description": 1,
        "long_description": 1,
        "chauffage": 1,
        "Exposition": 1,
        "Parking / Garage": 1,
        "Jardin / Terrain": 1,
        "Proximit√© M√©troBusGare SNCFGare RERCommercesEcolesEspaces verts": 1,
        "_id": 0
    }
    
    mongo_db = get_mongo_connection()
    
    # Debug: afficher le query_filter
    print("Filtre de recherche:", query_filter)
    
    # Ex√©cution de la requ√™te et r√©cup√©ration des r√©sultats
    results = list(mongo_db["description_logements"].find(query_filter, projection))
    
    # Debug: nombre de r√©sultats
    print(f"Nombre de r√©sultats trouv√©s: {len(results)}")
    
    # Conversion des r√©sultats BSON en JSON
    return json.loads(dumps(results))

@app.get("/mongo/indicateurs-foncieres")
async def get_indicateurs_foncieres(
    annee_mutation: Optional[int] = Query(None, description="Ann√©e de mutation"),
    code_geo: Optional[int] = Query(None, description="Code g√©ographique"),
    libelle_geo: Optional[str] = Query(None, description="Libell√© g√©ographique (nom de commune/d√©partement)"),
    credentials: HTTPAuthorizationCredentials = Depends(security)
):
    """
    R√©cup√®re les indicateurs fonciers depuis MongoDB avec des filtres optionnels.
    
    :param annee_mutation: Filtre par ann√©e de mutation.
    :param code_geo: Filtre par code g√©ographique.
    :param libelle_geo: Filtre par libell√© g√©ographique (nom de commune ou d√©partement).
    :param credentials: Token JWT pour l'authentification.
    :return: Liste des indicateurs fonciers correspondant aux crit√®res.
    """
    await verify_token(credentials)
    
    # Construction du filtre de requ√™te
    query_filter = {}
    if annee_mutation:
        query_filter["annee_mutation"] = annee_mutation
    if code_geo:
        query_filter["code_geo"] = code_geo
    if libelle_geo:
        query_filter["libelle_geo"] = {"$regex": libelle_geo, "$options": "i"}  # Recherche insensible √† la casse
    
    # S√©lection des champs √† retourner
    projection = {
        "annee_mutation": 1,
        "code_geo": 1,
        "libelle_geo": 1,
        "valeur_fonciere_median_cod111": 1,
        "prix_m2_median_cod111": 1,
        "surface_batie_median_cod111": 1,
        "_id": 0
    }
    
    mongo_db = get_mongo_connection()
    
    # Debug: afficher le query_filter
    print("Filtre de recherche indicateurs:", query_filter)
    
    results = list(mongo_db["indicateurs_donnees_foncieres_around_rennes"].find(query_filter, projection))
    
    # Debug: nombre de r√©sultats
    print(f"Nombre de r√©sultats indicateurs trouv√©s: {len(results)}")
    
    # Conversion des r√©sultats BSON en JSON
    return json.loads(dumps(results))

@app.get("/mongo/villes-autour-rennes")
async def get_villes_autour_rennes(
    distance_max: Optional[float] = Query(None, description="Distance maximale de Rennes en km"),
    population_min: Optional[float] = Query(None, description="Population minimale en milliers d'habitants"),
    zone_type: Optional[str] = Query(None, description="Type de zone (urbaine, rurale, etc.)"),
    services_requis: Optional[List[str]] = Query(None, description="Liste des services publics requis"),
    credentials: HTTPAuthorizationCredentials = Depends(security)
):
    """
    R√©cup√®re les donn√©es des villes autour de Rennes depuis MongoDB avec des filtres optionnels.
    
    :param distance_max: Filtre par distance maximale de Rennes en km.
    :param population_min: Filtre par population minimale en milliers d'habitants.
    :param zone_type: Filtre par type de zone (urbaine, rurale, etc.).
    :param services_requis: Filtre par pr√©sence de certains services publics.
    :param credentials: Token JWT pour l'authentification.
    :return: Liste des villes correspondant aux crit√®res.
    """
    await verify_token(credentials)
    
    # Construction du filtre de requ√™te
    query_filter = {}
    if distance_max is not None:
        query_filter["distance_to_rennes"] = {"$lte": distance_max}
    if population_min is not None:
        query_filter["population"] = {"$gte": population_min}
    if zone_type:
        query_filter["zone_type"] = {"$regex": zone_type, "$options": "i"}
    if services_requis:
        # Utilisation de $all pour v√©rifier que tous les services requis sont pr√©sents
        query_filter["public_facilities"] = {"$all": services_requis}
    
    # S√©lection des champs √† retourner
    projection = {
        "name": 1,
        "coordinates": 1,
        "distance_to_rennes": 1,
        "population": 1,
        "density": 1,
        "public_facilities": 1,
        "zone_type": 1,
        "_id": 0
    }
    
    mongo_db = get_mongo_connection()
    
    # Debug: afficher le query_filter
    print("Filtre de recherche villes:", query_filter)
    
    results = list(mongo_db["wikidata_cities_around_rennes"].find(query_filter, projection))
    
    # Debug: nombre de r√©sultats
    print(f"Nombre de r√©sultats villes trouv√©s: {len(results)}")
    
    # Conversion des r√©sultats BSON en JSON
    return json.loads(dumps(results))

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host='127.0.0.1', port=8000)